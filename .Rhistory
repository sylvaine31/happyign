library(happyign)
use_mit_license()
usethis::use_mit_license()
library(happyign)
library(happyign)
library(happyign)
library(happyign)
usethis::use_pipe()
library(happyign)
library(happyign)
library(happyign)
library(happyign)
library(happyign)
utils::globalVariables(".")
library(happyign)
cat(stringi::stri_escape_unicode("#' Calcul isochrones/isodistances
#'
#' Calcule les isochrones ou isodistances en France à partir d'un objet sf à l'aide de l'API de l'IGN
#' de la plateforme Géoportail. Les données de référence proviennent de la base de données
#' IGN BD TOPO®. Pour plus d'informations : https://geoservices.ign.fr/documentation/services/api-et-services-ogc/isochrone/api
#'
#' @section RESOURCE:
#'
#' Le calcul d’isochrones s’appuie sur les mêmes ressources que celles du calcul d’itinéraire.
#' Les ressources de type « PGR » et « ISO » sont utilisées, à savoir "bdtopo-iso" et "bdtopo-pgr".
cat(stringi::stri_escape_unicode("à partir d'un objet sf à l'aide de l'API de l'IGN"))
cat(stringi::stri_escape_unicode("sf_object doit être un objet de classe sf avec une géométrie de type POINT"))
library(happyign)
source(isochroner.R)
source("R/isochroner.R")
stringi::stri_enc_toascii("sf_object doit \u00eatre un objet de classe sf avec une g\u00e9om\u00e9trie de type POINT")
Encoding("sf_object doit \u00eatre un objet de classe sf avec une g\u00e9om\u00e9trie de type POINT")
stringi::stri_escape_unicode("sf être")
library(happyign)
p <- data.frame(x = c(1.3,1.4,1.5), y = c(43.5, 43.4, 43.6))
isochroner(p, crs = 3943)
p <- data.frame(x = c(1.3,1.4,1.5), y = c(43.5, 43.4, 43.6)) %>%
sf::st_as_sf(coords = c("x","y"), crs = 4326)
isochroner(p, crs = 3943)
p%>%
sf::st_transform(4326) %>%
dplyr::mutate(points = as.character(.data$geometry) %>%
gsub("[c|(|)|\\s]", "", ., perl = TRUE)) %>% #) %>%
dplyr::select("points") %>%
sf::st_drop_geometry() %>%
dplyr::pull("points") %>%
as.list()
p%>%
sf::st_transform(4326) %>%
dplyr::mutate(points = as.character("geometry") %>%
gsub("[c|(|)|\\s]", "", ., perl = TRUE)) %>% #) %>%
dplyr::select("points") %>%
sf::st_drop_geometry() %>%
dplyr::pull("points") %>%
as.list()
library(happyign)
isochroner(p, crs = 3943)
lifecycle::last_lifecycle_warnings()
library(happyign)
isochroner(p, crs = 3943)
lifecycle::last_lifecycle_warnings()
happyign::isochroner(p, crs = 3943)
happyign::isochroner(p, crs = 3943)
library(happyign)
happyign::isochroner(p, crs = 3943)
p
p[geometry]
p["geometry"]
geotm::map_qdl["geometry"]
sf::st_tranform(geotm::map_qdl, 4326)["geometry"]
sf::st_transform(geotm::map_qdl, 4326)["geometry"]
as.data.frame(sf::st_transform(geotm::map_qdl, 4326))["geometry"]
p_geometry <-  as.data.frame(sf::st_transform(p, 4326)["geometry"])
as.character(p)
parse(as.character(p))
eval(as.character(p))
eval(parse(as.character(p)))
eval(parse(as.character(text = p)))
p_geometry
gsub(p_geometry$geometry, "[c|(|)|\\s]", "", ., perl = TRUE)
gsub( "[c|(|)|\\s]", "", p_geometry$geometry, perl = TRUE)
as.list(gsub( "[c|(|)|\\s]", "", p_geometry$geometry, perl = TRUE))
x <- rerun(5, a = rbernoulli(1), b = sample(10))
rep(10, 10) |>
purrr::map(sample, 5) |>
purrr::keep(\(x) mean(x) > 6)
rep(10, 10) |>
purrr::map(sample, 5)
rep(10, 10) |>
purrr::map(sample, 5) %>% purrr:map(mean)
rep(10, 10) |>
purrr::map(sample, 5) %>% purrr::map(mean)
p_geometry
transform_sf(p)
transform_sf <- function(sf_object){
sf_geometry <- as.data.frame(sf::st_transform(sf_object, 4326)["geometry"])
list_sf <- as.list(gsub( "[c|(|)|\\s]", "", sf_geometry$geometry, perl = TRUE))
return(list_sf)
}
transform_sf(p)
list_oject <- transform_sf(p)
q = 10
crs = 4326
costType = "time"
profile = "pedestrian"
timeUnit="minute"
distanceUnit = "kilometer"
direction = "departure"
resource = "bdtopo-iso"
constraints = NULL
get_query <- function(entry, q = 10, crs = 4326, costType = "time",
profile = "pedestrian", timeUnit="minute", distanceUnit = "kilometer",
direction = "departure", resource = "bdtopo-iso", constraints = NULL){
request <- httr::GET("https://wxs.ign.fr/calcul/geoportail/isochrone/rest/1.0.0/isochrone?",
query = list(
point= .x,
costValue=q,
geometryFormat="geojson",
costType=costType, # ou "distance"
timeUnit=timeUnit, # "minute" ou "hour",
distanceUnit = distanceUnit, #(meter ou kilometer)
profile=profile,
crs = "EPSG:4326",
direction = "departure", # ou "arrival"
resource=resource,
constraints=constraints
))
return(request)
}
get_query <- function(entry, q = 10, crs = 4326, costType = "time",
profile = "pedestrian", timeUnit="minute", distanceUnit = "kilometer",
direction = "departure", resource = "bdtopo-iso", constraints = NULL){
request <- httr::GET("https://wxs.ign.fr/calcul/geoportail/isochrone/rest/1.0.0/isochrone?",
query = list(
point= entry,
costValue=q,
geometryFormat="geojson",
costType=costType, # ou "distance"
timeUnit=timeUnit, # "minute" ou "hour",
distanceUnit = distanceUnit, #(meter ou kilometer)
profile=profile,
crs = "EPSG:4326",
direction = "departure", # ou "arrival"
resource=resource,
constraints=constraints
))
return(request)
}
ploup <- lapply(transform_sf(p), get_query)
ploup
plip <-  lapply(ploup, httr::content,as = "text", encoding = "UTF-8")
plip
lapply(plip, sf::st_read)
plop <- lapply(plip, sf::st_read)
plop %>% sf::st_transform(3943)
lapply(plop, sf::st_transform, crs = crs)
switch(1, invisible(pi), pi)
1
invisible(pi)
pi
switch(2, invisible(pi), pi)
crs = 3943
lapply(plop, sf::st_transform, crs = crs)
dplyr::mutate
dplyr::UseMethod
sf::st_transform
httr::content
p_geometry
ploup
library(happyign)
happyign::isochroner(p)
library(happyign)
happyign::isochroner(p)
library(happyign)
happyign::isochroner(p)
library(happyign)
library(happyign)
library(happyign)
library(happyign)
library(happyign)
